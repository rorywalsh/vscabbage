name: Build and Package Extensions

on:
  push:
    branches:
      - '**' # Trigger on pushes to all branches
  pull_request:
    branches:
      - develop # Trigger on pull requests to develop branch

jobs:
  build_macos:
    runs-on: macos-latest
       # Ensure it only runs on main, or when run_build is passed to commit message
    if: github.ref == 'refs/heads/main' || contains(github.event.head_commit.message, 'run_build') 
    steps:
      - name: Checkout source code for cabbage3
        uses: actions/checkout@v2
        with:
          repository: rorywalsh/cabbage3
          path: cabbage3
          ref: develop
          fetch-depth: 1
          submodules: true

      - name: Verify cabbage3 directory
        run: |
          ls -l
          ls -l cabbage3

      - name: Set Up Signing Certificate  
        uses: apple-actions/import-codesign-certs@v3
        with: 
          p12-file-base64: ${{ secrets.CERTIFICATE_P12 }}
          p12-password: ${{ secrets.CERTIFICATE_PASSWORD }}

      - name: Download CsoundLib64 Package
        run: |
          # Download the package using curl
          curl -L -o csound-7.zip "https://www.dropbox.com/scl/fi/d5hnkcecizlwgvnaw1yjy/csound-7.zip?rlkey=pf9v3ucfo8hecyl5ahbacr0a0&dl=1"
          
          # Extract the zip file
          unzip csound-7.zip -d csound-7

          # Verify the file exists
          ls -l csound-7/CsoundLib64-7.0-vanilla-universal.pkg

          # Make the downloaded file executable
          chmod +x csound-7/CsoundLib64-7.0-vanilla-universal.pkg

          # Install the package
          sudo installer -pkg csound-7/CsoundLib64-7.0-vanilla-universal.pkg -target /

      - name: Configure build for cabbage3
        run: |
          cd cabbage3
          cmake -GXcode -B build -S . -DCMAKE_OSX_DEPLOYMENT_TARGET="10.15"

      - name: Build macOS app for cabbage3
        run: |
          cd cabbage3
          cmake --build build --config Debug


      # - name: Sign binaries
      #   env:
      #     APPLE_DEVELOPER_TEAM_ID: ${{ secrets.APPLE_DEVELOPER_TEAM_ID }}
      #   run: |
      #     cd cabbage3/build
      #     codesign --force -s "${APPLE_DEVELOPER_TEAM_ID}" -v CabbageApp/out/CabbageApp.app --deep --strict --options=runtime --timestamp
      #     codesign --force -s "${APPLE_DEVELOPER_TEAM_ID}" -v CabbageVST3Effect/out/CabbageVST3Effect.vst3 --deep --strict --options=runtime --timestamp
      #     # codesign --force -s "${APPLE_DEVELOPER_TEAM_ID}" -v CabbageStandaloneApp/out/CabbageStandaloneApp.app --deep --strict --options=runtime --timestamp

      # Upload only the required files as individual artifacts
      - name: Upload Cabbage build files as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: CabbageAUv2Effect.component
          path: cabbage3/build/CabbageAUv2Effect/out/CabbageAUv2Effect.component
          retention-days: 1
          if-no-files-found: ignore

      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: CabbageAUv2Synth.component
      #     path: cabbage3/build/CabbageAUv2Synth/out/CabbageAUv2Synth.component
      #     if-no-files-found: ignore

      - uses: actions/upload-artifact@v4
        with:
          name: CabbageApp.app
          path: cabbage3/build/CabbageApp/out/CabbageApp.app
          retention-days: 1
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v4
        with:
          name: CabbageStandaloneApp.app
          path: cabbage3/build/CabbageStandaloneApp/out/CabbageStandaloneApp.app
          retention-days: 1
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v4
        with:
          name: CabbageVST3Effect.vst3
          path: cabbage3/build/CabbageVST3Effect/out/CabbageVST3Effect.vst3
          retention-days: 1
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v4
        with:
          name: CabbageVST3Synth.vst3
          path: cabbage3/build/CabbageVST3Synth/out/CabbageVST3Synth.vst3
          retention-days: 1
          if-no-files-found: ignore


      # Checkout source code for vscabbage
      - name: Checkout source code for vscabbage
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: true

      # Create CabbageBundle folder
      - name: Create CabbageBundle folder
        run: |
          mkdir -p "./src/CabbageBundle"
          cd src
          ls

      # Download and copy the required artifacts into the vscabbage src directory
      - name: Downloading CabbageApp
        uses: actions/download-artifact@v4
        with:
          name: CabbageApp.app
          path: "./src/CabbageBundle/CabbageApp.app"
        continue-on-error: true

      - name: Downloading CabbageVST3Effect
        uses: actions/download-artifact@v4
        with:
          name: CabbageVST3Effect.vst3
          path: "./src/CabbageBundle/CabbageVST3Effect.vst3"
        continue-on-error: true

      # - name: Downloading CabbageAUv2Synth
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: CabbageAUv2Synth.component
      #     path: "./src/CabbageBundle/CabbageAUv2Synth.component"
      #   continue-on-error: true

      - name: Downloading CabbageAUv2Effect
        uses: actions/download-artifact@v4
        with:
          name: CabbageAUv2Effect.component
          path: "./src/CabbageBundle/CabbageAUv2Effect.component"
        continue-on-error: true

      - name: Downloading CabbageVST3Synth
        uses: actions/download-artifact@v4
        with:
          name: CabbageVST3Synth.vst3
          path: "./src/CabbageBundle/CabbageVST3Synth.vst3"
        continue-on-error: true

      - name: Set up Node.js (v18) on macOS
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies on macOS
        run: npm install

      - name: Install vsce on macOS
        run: npm install -g @vscode/vsce

      - name: Build and package extension on macOS
        run: vsce package --out vscabbage-0.0.1-macos.vsix

      - name: Upload VSIX artifact from macOS
        uses: actions/upload-artifact@v4
        with:
          name: vscabbage-extension-macos
          path: 'vscabbage-0.0.1-macos.vsix'

# ========================================================================================
#  Windows build job
# ========================================================================================

  build_windows:
    runs-on: windows-latest
    # Ensure it only runs on main, or when run_build is passed to commit message
    if: github.ref == 'refs/heads/main' || contains(github.event.head_commit.message, 'run_build') 
    steps:
      - name: Checkout source code for cabbage3
        uses: actions/checkout@v2
        with:
          repository: rorywalsh/cabbage3
          path: cabbage3
          ref: develop
          fetch-depth: 1
          submodules: true

      - name: Verify cabbage3 directory
        shell: cmd
        run: |
          ls -l
          ls -l cabbage3

      - name: Download and Extract Csound
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://www.dropbox.com/scl/fi/41g11e00yb4v66fduyw3f/Csound7.zip?rlkey=231ot83u6rmnxapwe03krm04z&st=5bzhtada&dl=1" -OutFile "Csound7.zip"
          Expand-Archive -Path "Csound7.zip" -DestinationPath "$env:ProgramFiles"
          Get-ChildItem "$env:ProgramFiles\Csound7"

      - name: Configure build
        shell: cmd
        run: |
          ls -l
          cd cabbage3
          cmake -G "Visual Studio 17 2022" -S . -B build 
        
      - name: Build 
        shell: cmd
        run: |
          ls -l
          cd cabbage3
          cmake --build build --config Debug
        continue-on-error: true

      - name: Verify builds
        shell: cmd
        run: |
          cd cabbage3
          echo "Checking if the build artifacts exist for CabbageApp"
          ls build/CabbageApp
          tree build/CabbageApp
          echo "Checking if the build artifacts exist for CabbageVST3Synth/Effect"
          ls build/CabbageVST3Effect/out
          ls build/CabbageVST3Synth/out

      - name: Upload CabbageApp
        uses: actions/upload-artifact@v4
        with:
          name: CabbageApp.exe
          path: cabbage3/build/CabbageApp/CabbageApp.exe
          retention-days: 1
          if-no-files-found: ignore

      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: CabbageStandaloneApp.app
      #     path: cabbage3/build/CabbageStandaloneApp/out/CabbageStandaloneApp.app
      #     retention-days: 1
      #     if-no-files-found: ignore
      - name: Upload CabbageVST3Effect
        uses: actions/upload-artifact@v4
        with:
          name: CabbageVST3Effect_x64.vst3
          path: cabbage3/build/CabbageVST3Effect/out/CabbageVST3Effect.vst3
          retention-days: 1
          if-no-files-found: ignore

      - name: Upload CabbageVST3Synth
        uses: actions/upload-artifact@v4
        with:
          name: CabbageVST3Synth_x64.vst3
          path: cabbage3/build/CabbageVST3Synth/out/CabbageVST3Synth.vst3
          retention-days: 1
          if-no-files-found: ignore



      - name: Checkout source code for vscabbage
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: true

      - name: Set up Node.js (v18) on Windows
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies on Windows
        run: npm install

      # Create CabbageBundle folder
      - name: Create CabbageBundle folder
        run: |
          mkdir -p "./src/CabbageBundle"
          cd src
          ls

      # Download and copy the required artifacts into the vscabbage src directory
      - name: Downloading CabbageApp
        uses: actions/download-artifact@v4
        with:
          name: CabbageApp.exe
          path: "./src/CabbageBundle/CabbageApp.exe"
        continue-on-error: true

      - name: Downloading CabbageVST3Effect
        uses: actions/download-artifact@v4
        with:
          name: CabbageVST3Effect_x64.vst3
          path: "./src/CabbageBundle/CabbageVST3Effect_x64.vst3"
        continue-on-error: true

      - name: Downloading CabbageVST3Synth
        uses: actions/download-artifact@v4
        with:
          name: CabbageVST3Synth_x64.vst3
          path: "./src/CabbageBundle/CabbageVST3Synth_x64.vst3"
        continue-on-error: true

      - name: Install vsce on Windows
        run: npm install -g @vscode/vsce

      - name: Build and package extension on Windows
        run: vsce package --out vscabbage-0.0.1-windows.vsix

      - name: Upload VSIX artifact from Windows
        uses: actions/upload-artifact@v4
        with:
          name: vscabbage-extension-windows
          path: 'vscabbage-0.0.1-windows.vsix'

  #steps to tag and release artifacts
  release:
    needs: [build_macos, build_windows]
    runs-on: ubuntu-latest
     # Ensure it only runs on main, or when run_build is passed to commit message
    if: github.ref == 'refs/heads/main' || contains(github.event.head_commit.message, 'run_build') 

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for accurate tagging

      - name: Download macOS VSIX
        uses: actions/download-artifact@v4
        with:
          name: vscabbage-extension-macos
          path: ./release

      - name: Download Windows VSIX
        uses: actions/download-artifact@v4
        with:
          name: vscabbage-extension-windows
          path: ./release

      - name: Verify Artifacts
        run: |
          echo "Listing artifacts:"
          ls -lh ./release
        continue-on-error: true

      - name: Create Unique Git Tag Based on Last Tag
        run: |
          # Fetch tags
          git fetch --tags

          # Get the latest tag (if no tag exists, default to 0.0.0-alpha)
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0-alpha")
          echo "Last tag: $last_tag"

          # Extract major, minor, patch
          if [[ "$last_tag" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-[a-zA-Z0-9.-]+)?$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            label=${BASH_REMATCH[4]}
          else
            echo "Invalid tag format. Defaulting to 1.0.0-alpha."
            major=0
            minor=0
            patch=0
            label="-alpha"
          fi 

          # Increment patch version and append alpha label
          new_patch=$((patch + 1))
          new_version="${major}.${minor}.${new_patch}-alpha"
          echo "New version: $new_version"

          # Configure Git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Create and push the new tag
          git tag -a $new_version -m "Alpha pre-release for $new_version"
          git push origin $new_version

          # Set the new version as an environment variable
          echo "VERSION=$new_version" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Pre-Release
        run: |
          VERSION="${{ env.VERSION }}"
          gh release create $VERSION ./release/vscabbage-0.0.1-macos.vsix ./release/vscabbage-0.0.1-windows.vsix \
            --title "$VERSION" \
            --notes "Pre-release candidate for $VERSION" \
            --prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: List and Delete Old Git Tags and Releases
        run: |
          # Fetch all tags
          git fetch --tags
          
          # Get a list of all tags sorted by creation date, most recent first
          tags=$(git for-each-ref --sort=-creatordate --format='%(refname:short)' refs/tags)
          
          # Convert to array
          tags_array=($tags)
          
          # Get the count of all tags
          total_tags=${#tags_array[@]}
          
          tags_to_keep=2
          echo "Total tags: $total_tags"

          # Check if there are more than tags_to_keep tags
          if [ $total_tags -gt $tags_to_keep ]; then
            # Calculate how many tags need to be deleted
            tags_to_delete_count=$((total_tags - tags_to_keep))
            
            echo "Deleting $tags_to_delete_count old tags and their associated releases..."

            # Delete the old tags and associated releases
            for ((i=tags_to_keep; i<total_tags; i++)); do
              old_tag=${tags_array[$i]}
              echo "Deleting tag and release: $old_tag"
              
              # Delete the GitHub release associated with the tag
              gh release delete $old_tag --yes || echo "No release found for $old_tag"
              
              # Delete the tag locally
              git tag -d $old_tag
              
              # Delete the tag remotely
              git push origin :refs/tags/$old_tag
            done
          else
            echo "Less than or equal to $tags_to_keep tags present. No tags or releases deleted."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
