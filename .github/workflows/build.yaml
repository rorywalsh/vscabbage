name: Build and Package Extensions

on:
  push:
    branches:
      - '**' # Trigger on pushes to all branches
  pull_request:
    branches:
      - develop # Trigger on pull requests to develop branch

jobs:
  generate_tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.generate_version.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for accurate tagging

      - name: Generate Unique Version Tag
        id: generate_version
        run: |
          # Fetch tags
          git fetch --tags

          # Get the latest tag, defaulting to 1.0.0-alpha
          last_tag=$(git tag --sort=-v:refname | head -n 1 || echo "1.0.0-alpha")
          echo "Last tag: $last_tag"

          # Extract major, minor, patch
          if [[ "$last_tag" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-[a-zA-Z0-9.-]+)?$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            label=${BASH_REMATCH[4]}
          else
            echo "Invalid tag format. Defaulting to 1.0.0-alpha."
            major=0
            minor=0
            patch=0
            label="-alpha"
          fi 

          # Increment patch version and append alpha label
          new_patch=$((patch + 1))
          new_version="${major}.${minor}.${new_patch}-alpha"
          echo "New version: $new_version"

          # Set the new version as an output
          echo "::set-output name=version::$new_version"

  build_macos:
    needs: generate_tag
    runs-on: macos-latest
       # Ensure it only runs on main, or when run_build is passed to commit message
    if: github.ref == 'refs/heads/main' || contains(github.event.head_commit.message, 'run_build') 
    steps:
      - name: Checkout source code for cabbage3
        uses: actions/checkout@v2
        with:
          repository: rorywalsh/cabbage3
          path: cabbage3
          ref: develop
          fetch-depth: 1
          submodules: true

      - name: Verify cabbage3 directory
        run: |
          ls -l
          ls -l cabbage3

      - name: Set Up Signing Certificate  
        uses: apple-actions/import-codesign-certs@v3
        with: 
          p12-file-base64: ${{ secrets.CERTIFICATE_P12 }}
          p12-password: ${{ secrets.CERTIFICATE_PASSWORD }}

      - name: Download CsoundLib64 Package
        run: |
          # Download the package using curl
          curl -L -o csound-7.zip "https://www.dropbox.com/scl/fi/d5hnkcecizlwgvnaw1yjy/csound-7.zip?rlkey=pf9v3ucfo8hecyl5ahbacr0a0&dl=1"
          
          # Extract the zip file
          unzip csound-7.zip -d csound-7

          # Verify the file exists
          ls -l csound-7/CsoundLib64-7.0-vanilla-universal.pkg

          # Make the downloaded file executable
          chmod +x csound-7/CsoundLib64-7.0-vanilla-universal.pkg

          # Install the package
          sudo installer -pkg csound-7/CsoundLib64-7.0-vanilla-universal.pkg -target /

      - name: Set up Xcode path
        run: sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer

      - name: Configure and build
        run: |
          cd cabbage3
          export CC=/usr/bin/clang
          export CXX=/usr/bin/clang++
          # Get absolute paths to compilers
          CC_PATH=$(which clang)
          CXX_PATH=$(which clang++)

          cmake -GXcode -B build \
          -DCMAKE_OSX_DEPLOYMENT_TARGET="11.0" \
          -DCMAKE_C_COMPILER=$CC_PATH \
          -DCMAKE_CXX_COMPILER=$CXX_PATH \
          -DCMAKE_OBJC_COMPILER=$CC_PATH \
          -DCMAKE_OBJCXX_COMPILER=$CXX_PATH \
          -DBUILD_ALL_TARGETS=True \
          -DCMAKE_BUILD_TYPE=Release


      # - name: Sign binaries
      #   env:
      #     APPLE_DEVELOPER_TEAM_ID: ${{ secrets.APPLE_DEVELOPER_TEAM_ID }}
      #   run: |
      #     cd cabbage3/build
      #     codesign --force -s "${APPLE_DEVELOPER_TEAM_ID}" -v CabbageApp/out/CabbageApp.app --deep --strict --options=runtime --timestamp
      #     codesign --force -s "${APPLE_DEVELOPER_TEAM_ID}" -v CabbageVST3Effect/out/CabbageVST3Effect.vst3 --deep --strict --options=runtime --timestamp
      #     # codesign --force -s "${APPLE_DEVELOPER_TEAM_ID}" -v CabbageStandaloneApp/out/CabbageStandaloneApp.app --deep --strict --options=runtime --timestamp

      - name: Verify builds
        run: |
          echo "Checking if the build artifacts exist for CabbageApp"
          ls cabbage3/build/CabbageApp/Release
          echo "Checking if the build artifacts exist for CabbagePluginSynth/Effect"
          ls cabbage3/build/CabbagePluginEffect/CabbagePluginEffect_assets/Release
          ls cabbage3/build/CabbagePluginSynth/CabbagePluginSynth_assets/Release

      # Upload only the required files as individual artifacts
      - name: Upload Cabbage build files as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: CabbagePluginEffect.component
          path: cabbage3/build/CabbagePluginEffect/CabbagePluginEffect_assets/Release/CabbagePluginEffect.component
          retention-days: 1
          if-no-files-found: ignore

      # Upload only the required files as individual artifacts
      - name: Upload Cabbage build files as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: CabbagePluginSynth.component
          path: cabbage3/build/CabbagePluginSynth/CabbagePluginSynth_assets/Release/CabbagePluginSynth.component
          retention-days: 1
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v4
        with:
          name: CabbageApp
          path: cabbage3/build/CabbageApp/Release/CabbageApp
          retention-days: 1
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v4
        with:
          name: CabbagePluginEffect.vst3
          path: cabbage3/build/CabbagePluginEffect/CabbagePluginEffect_assets/Release/CabbagePluginEffect.vst3
          retention-days: 1
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v4
        with:
          name: CabbagePluginSynth.vst3
          path: cabbage3/build/CabbagePluginSynth/CabbagePluginSynth_assets/Release/CabbagePluginSynth.vst3
          retention-days: 1
          if-no-files-found: ignore


      # Checkout source code for vscabbage
      - name: Checkout source code for vscabbage
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: true

      - name: Update version in package.json
        shell: bash
        run: |
          VERSION=${{ needs.generate_tag.outputs.version }}
          echo "Updating package.json with version $VERSION"
          # Use proper quoting to handle version string safely
          jq --arg v "$VERSION" '.version = $v' package.json > tmp.$$.json && mv tmp.$$.json package.json

      # Create CabbageBinaries folder
      - name: Create CabbageBinaries folder
        run: |
          mkdir -p "./src/CabbageBinaries"
          cd src
          ls

      # Download and copy the required artifacts into the vscabbage src directory
      - name: Downloading CabbageApp
        uses: actions/download-artifact@v4
        with:
          name: CabbageApp
          path: "./src/CabbageBinaries"
        continue-on-error: false

      - name: Downloading CabbagePluginEffect
        uses: actions/download-artifact@v4
        with:
          name: CabbagePluginEffect.vst3
          path: "./src/CabbageBinaries/CabbagePluginEffect.vst3"
        continue-on-error: false

      # - name: Downloading CabbageAUv2Synth
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: CabbageAUv2Synth.component
      #     path: "./src/CabbageBinaries/CabbageAUv2Synth.component"
      #   continue-on-error: true

      # - name: Downloading CabbageAUv2Effect
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: CabbageAUv2Effect.component
      #     path: "./src/CabbageBinaries/CabbageAUv2Effect.component"
      #   continue-on-error: true

      - name: Downloading CabbagePluginSynth
        uses: actions/download-artifact@v4
        with:
          name: CabbagePluginSynth.vst3
          path: "./src/CabbageBinaries/CabbagePluginSynth.vst3"
        continue-on-error: false

      - name: Set up Node.js (v18) on macOS
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies on macOS
        run: npm install

      - name: Install vsce on macOS
        run: npm install -g @vscode/vsce

      - name: Build and package extension on macOS
        run: vsce package --out vscabbage-${{ needs.generate_tag.outputs.version }}-macos.vsix

      - name: Upload VSIX artifact from macOS
        uses: actions/upload-artifact@v4
        with:
          name: vscabbage-extension-macos
          path: vscabbage-${{ needs.generate_tag.outputs.version }}-macos.vsix

# ========================================================================================
#  Windows build job
# ========================================================================================

  build_windows:
    needs: generate_tag
    runs-on: windows-latest
    # Ensure it only runs on main, or when run_build is passed to commit message
    if: github.ref == 'refs/heads/main' || contains(github.event.head_commit.message, 'run_build') 
    steps:
      - name: Checkout source code for cabbage3
        uses: actions/checkout@v2
        with:
          repository: rorywalsh/cabbage3
          path: cabbage3
          ref: develop
          fetch-depth: 1
          submodules: true

      - name: Verify cabbage3 directory
        shell: cmd
        run: |
          ls -l
          ls -l cabbage3

      - name: Download and Extract Csound
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://dl.dropboxusercontent.com/scl/fi/18ppri60nupdrwyo1zt1x/csound-7.exe?rlkey=m6592gt8pfkhvirnl17rbrwfh&st=cml9vetz" -OutFile "csound-7.exe"

      - name: Install Csound
        shell: pwsh
        run: |
          Start-Process -FilePath ".\csound-7.exe" -ArgumentList "/VERYSILENT" -Wait -Verb RunAs


      - name: Wait for Installation to Complete
        shell: pwsh
        run: |
          Start-Sleep -Seconds 5

      - name: Verify Csound
        run: |
          ls "C:\Program Files\Csound7"
          ls "C:\Program Files\Csound7\lib"
          ls "C:\Program Files\Csound7\include\csound"

      - name: Configure and build
        shell: cmd
        run: |
          cd cabbage3
          cmake -G "Visual Studio 17 2022" -S . -B build -DBUILD_ALL_TARGETS=ON -DCMAKE_BUILD_TYPE=Release

      - name: Verify builds
        shell: cmd
        run: |
          echo "Checking if the build artifacts exist for CabbageApp"
          tree cabbage3/build/CabbageApp/Release
          echo "Checking if the build artifacts exist for CabbageVST3Synth/Effect"
          ls cabbage3/build/CabbagePluginEffect/CabbagePluginEffect_assets/VST3/Release
          ls cabbage3/build/CabbagePluginSynth/CabbagePluginSynth_assets/VST3/Release

      - name: Upload CabbageApp
        uses: actions/upload-artifact@v4
        with:
          name: CabbageApp.exe
          path: cabbage3/build/CabbageApp/Release/CabbageApp.exe
          retention-days: 1
          if-no-files-found: ignore

      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: CabbageStandaloneApp.app
      #     path: cabbage3/build/CabbageStandaloneApp/out/CabbageStandaloneApp.app
      #     retention-days: 1
      #     if-no-files-found: ignore
      - name: Upload CabbageVST3Effect
        uses: actions/upload-artifact@v4
        with:
          name: CabbagePluginEffect_x64.vst3
          path: cabbage3/build/CabbagePluginEffect/CabbagePluginEffect_assets/VST3/Release/CabbagePluginEffect.vst3
          retention-days: 1
          if-no-files-found: ignore

      - name: Upload CabbageVST3Synth
        uses: actions/upload-artifact@v4
        with:
          name: CabbagePluginSynth_x64.vst3
          path: cabbage3/build/CabbagePluginSynth/CabbagePluginSynth_assets/VST3/Release/CabbagePluginSynth.vst3
          retention-days: 1
          if-no-files-found: ignore



      - name: Checkout source code for vscabbage
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: true

      - name: Update version in package.json
        shell: pwsh
        run: |
          $env:VERSION = "${{ needs.generate_tag.outputs.version }}"
          Write-Host "Updating package.json with version $env:VERSION"
          jq --arg version "$env:VERSION" '.version = $version' package.json | Set-Content package.json

      - name: Set up Node.js (v18) on Windows
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies on Windows
        run: npm install

      # Create CabbageBinaries folder
      - name: Create CabbageBinaries folder
        run: |
          mkdir -p "./src/CabbageBinaries"
          cd src
          ls

      # Download and copy the required artifacts into the vscabbage src directory
      - name: Downloading CabbageApp
        uses: actions/download-artifact@v4
        with:
          name: CabbageApp.exe
          path: "./src/CabbageBinaries"
        continue-on-error: true

      - name: Downloading CabbageVST3Effect
        uses: actions/download-artifact@v4
        with:
          name: CabbagePluginEffect_x64.vst3
          path: "./src/CabbageBinaries/CabbagePluginEffect_x64.vst3"
        continue-on-error: true

      - name: Downloading CabbageVST3Synth
        uses: actions/download-artifact@v4
        with:
          name: CabbagePluginSynth_x64.vst3
          path: "./src/CabbageBinaries/CabbagePluginSynth_x64.vst3"
        continue-on-error: true

      - name: Install vsce on Windows
        run: npm install -g @vscode/vsce

      - name: Build and package extension on Windows
        run: vsce package --out vscabbage-${{ needs.generate_tag.outputs.version }}-windows.vsix

      - name: Upload VSIX artifact from Windows
        uses: actions/upload-artifact@v4
        with:
          name: vscabbage-extension-windows
          path: vscabbage-${{ needs.generate_tag.outputs.version }}-windows.vsix

  # =============================================================================
  # steps to tag and release artifacts
  release:
    needs: [build_macos, build_windows, generate_tag]
    runs-on: ubuntu-latest
     # Releases can only be built from the main branch, but artefacts can be created from any branch
    if: github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, 'no_build')

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for accurate tagging

      - name: Download macOS VSIX
        uses: actions/download-artifact@v4
        with:
          name: vscabbage-extension-macos
          path: ./release

      - name: Download Windows VSIX
        uses: actions/download-artifact@v4
        with:
          name: vscabbage-extension-windows
          path: ./release

      - name: Verify Artifacts
        run: |
          echo "Listing artifacts:"
          ls -lh ./release
        continue-on-error: true

      - name: Create GitHub Pre-Release
        run: |
          VERSION="${{ needs.generate_tag.outputs.version }}"
          LAST_COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          gh release create $VERSION ./release/vscabbage-${{ needs.generate_tag.outputs.version }}-macos.vsix ./release/vscabbage-${{ needs.generate_tag.outputs.version }}-windows.vsix \
            --title "$VERSION" \
            --notes "$LAST_COMMIT_MESSAGE" \
            --prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



      - name: List and Delete Old Git Tags and Releases
        run: |
          # Fetch all tags
          git fetch --tags
          
          # Get a list of all tags sorted by creation date, most recent first
          tags=$(git for-each-ref --sort=-creatordate --format='%(refname:short)' refs/tags)
          
          # Convert to array
          tags_array=($tags)
          
          # Get the count of all tags
          total_tags=${#tags_array[@]}
          
          tags_to_keep=2
          echo "Total tags: $total_tags"

          # Check if there are more than tags_to_keep tags
          if [ $total_tags -gt $tags_to_keep ]; then
            # Calculate how many tags need to be deleted
            tags_to_delete_count=$((total_tags - tags_to_keep))
            
            echo "Deleting $tags_to_delete_count old tags and their associated releases..."

            # Delete the old tags and associated releases
            for ((i=tags_to_keep; i<total_tags; i++)); do
              old_tag=${tags_array[$i]}
              echo "Deleting tag and release: $old_tag"
              
              # Delete the GitHub release associated with the tag
              gh release delete $old_tag --yes || echo "No release found for $old_tag"
              
              # Delete the tag locally
              git tag -d $old_tag
              
              # Delete the tag remotely
              git push origin :refs/tags/$old_tag
            done
          else
            echo "Less than or equal to $tags_to_keep tags present. No tags or releases deleted."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}