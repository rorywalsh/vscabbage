
**********************************************************
Cabbage Log..
Log started: 16 Feb 2017 6:49:00pm

Plugin constructor
caption
size
pluginid
guirefresh
Modifying Widget Appearance
800, 500
TEx1
16
END
pluginid
bounds
colour
shape
outlinecolour
outlinethickness
identchannel
rotate
 20,180, 50,11
250,250,  0,255
sharp
white
2
image1
0, 0, 0
END
bounds
channel
range
fontcolour
colour
  0, 210, 450, 30
HorPos
  0,450, 20,1,1
white
SlateGrey
END
bounds
text
fontcolour
210,233, 35, 11
X Pos.
white
END
X Pos.
bounds
channel
range
fontcolour
colour
460,  0, 30, 200
VertPos
  0,200,20,1,1
white
SlateGrey
END
bounds
text
fontcolour
484,100, 35, 11
Y Pos.
white
END
Y Pos.
bounds
channel
range
fontcolour
colour
text
 10, 240, 390, 30
SizeX
  1,450, 50,1,1
white
SlateGrey
Size X
END
Size X
bounds
channel
range
fontcolour
colour
text
 10, 270, 390, 30
SizeY
  1,450, 11,1,1
white
SlateGrey
Size Y
END
Size Y
bounds
channel
value
text
400,240, 100, 25
VisibleInvisible
2
Invisible", "Visible
END
Invisible"
 "Visible
bounds
text
plant
 10, 310,220,170
Main Object
main
END
Main Object
bounds
channel
items
value
channeltype
 70,  30, 80, 20
Shape
rounded", "sharp", "ellipse
1
string
END
rounded"
 "sharp"
 "ellipse
bounds
channel
range
fontcolour
colour
text
trackercolour
  0,  50,220, 30
Red
  0,255,250,1,1
red
red
Red
red
END
Red
bounds
channel
range
fontcolour
colour
text
trackercolour
  0,  80,220, 30
Green
  0,255,250,1,1
green
green
Green
green
END
Green
bounds
channel
range
fontcolour
colour
text
trackercolour
  0, 110,220, 30
Blue
  0,255,  0,1,1
blue
blue
Blue
blue
END
Blue
bounds
channel
range
fontcolour
colour
text
  0, 140,220, 30
Alpha
  0,255,255,1,1
white
SlateGrey
Alpha
END
Alpha


END
bounds
text
plant
230,310,220,170
Line
line
END
Line
bounds
channel
range
fontcolour
colour
text
  0,  20, 220, 30
Line
0, 100, 0,1,1
white
SlateGrey
Thick
END
Thick
bounds
channel
range
fontcolour
colour
text
trackercolour
  0,  50, 220, 30
LineRed
  0,255,250,1,1
red
red
Red
red
END
Red
bounds
channel
range
fontcolour
colour
text
trackercolour
  0,  80, 220, 30
LineGreen
  0,255,250,1,1
green
green
Green
green
END
Green
bounds
channel
range
fontcolour
colour
text
trackercolour
  0, 110, 220, 30
LineBlue
  0,255,  0,1,1
blue
blue
Blue
blue
END
Blue
bounds
channel
range
fontcolour
colour
text
  0, 140, 220, 30
LineAlpha
  0,255,255,1,1
white
SlateGrey
Alpha
END
Alpha


END
bounds
text
plant
450,370,220,110
Rotation
rotatation
END
Rotation
bounds
channel
range
fontcolour
colour
text
  0,  20, 220, 30
radians
0, 6.283, 0,1,0.001
white
SlateGrey
Radians
END
Radians
bounds
channel
range
fontcolour
colour
text
  0,  50, 220, 30
pivotx
0, 1, 0,1,0.001
white
SlateGrey
Pivot X
END
Pivot X
bounds
channel
range
fontcolour
colour
text
  0,  80, 220, 30
pivoty
0, 1, 0,1,0.001
white
SlateGrey
Pivot Y
END
Pivot Y


END
bounds
colour
shape
outlinecolour
line
plant
525,10,265,310
 10, 10, 15
sharp
white
0
instructions
END
line
bounds
fontcolour
align
text
  5, 5, 255, 12
white
left
It is possible to modify various aspects of a 
END
It is possible to modify various aspects of a 
bounds
fontcolour
align
text
  5,20, 255, 12
white
left
widget's appearance during Csound  
END
widget's appearance during Csound  
bounds
fontcolour
align
text
  5,35, 255, 12
white
left
performance. This is achieved through the 
END
performance. This is achieved through the 
bounds
fontcolour
align
text
  5,50, 255, 12
white
left
use of widget's 'identchannel' - a name given
END
use of widget's 'identchannel' - a name given
bounds
fontcolour
align
text
  5,65, 255, 12
white
left
to the widget to identify it from within the 
END
to the widget to identify it from within the 
bounds
fontcolour
align
text
  5,80, 255, 12
white
left
Csound orchestra. The widget is sent an 
END
Csound orchestra. The widget is sent an 
bounds
fontcolour
align
text
  5,95, 255, 12
white
left
instruction as a string variable  
END
instruction as a string variable  
bounds
fontcolour
align
text
  5,110, 255, 12
white
left
corresponding to the change in appearance
END
corresponding to the change in appearance
bounds
fontcolour
align
text
  5,125, 255, 12
white
left
we desire. This message is sent using the
END
we desire. This message is sent using the
bounds
fontcolour
align
text
  5,140, 255, 12
white
left
'chnset' opcode and the channel used is the 
END
'chnset' opcode and the channel used is the 
bounds
fontcolour
align
text
  5,155, 255, 12
white
left
'identchannel' name we defined previously 
END
'identchannel' name we defined previously 
bounds
fontcolour
align
text
  5,170, 255, 12
white
left
for the widget.
END
for the widget.
bounds
fontcolour
align
text
  5,190, 255, 12
white
left
In this example various attributes of an
END
In this example various attributes of an
bounds
fontcolour
align
text
  5,205, 255, 12
white
left
'image' widget can be modified using the  
END
'image' widget can be modified using the  
bounds
fontcolour
align
text
  5,220, 255, 12
white
left
on-screen sliders comboboxes and buttons.
END
on-screen sliders comboboxes and buttons.
bounds
fontcolour
align
text
  5,235, 255, 12
white
left
For the sake of efficiency widgets are only
END
For the sake of efficiency widgets are only
bounds
fontcolour
align
text
  5,250, 255, 12
white
left
sent messages when the sliders are moved.
END
sent messages when the sliders are moved.
bounds
fontcolour
align
text
  5,265, 255, 12
white
left
We can detect changes in the sliders using
END
We can detect changes in the sliders using
bounds
fontcolour
align
text
  5,280, 255, 12
white
left
triggers generated by the 'changed' opcode.
END
triggers generated by the 'changed' opcode.


END
2
UnifiedCSD:  /home/rory/sourcecode/cabaiste/Examples/Instructional/ModifyingWidgetAppearance.csd
STARTING FILE
Creating options
Creating orchestra
Creating score
rtaudio: ALSA module enabled
rtmidi: ALSA Raw MIDI module enabled
Elapsed time at end of orchestra compile: real: 0.004s, CPU: 0.003s
sorting score ...
	... done
Elapsed time at end of score sort: real: 0.004s, CPU: 0.003s
displays suppressed
0dBFS level = 1.0
orch now loaded
audio buffered in 256 sample-frame blocks
SECTION 1:
new alloc for instr 1:
end of section 1	 sect peak amps:  0.00000  0.00000
SECTION 1:


colour
250,250,0,255
END
bounds
28,180,50,11
END
bounds
38,180,50,11
END
bounds
49,180,50,11
END
bounds
59,180,50,11
END
bounds
70,180,50,11
END
bounds
80,180,50,11
END
bounds
99,180,50,11
END
bounds
129,180,50,11
END
bounds
186,180,50,11
END
bounds
218,180,50,11
END
bounds
226,180,50,11
END
bounds
234,180,50,11
END
bounds
238,180,50,11
END
bounds
218,180,50,11
END
bounds
206,180,50,11
END
bounds
206,177,50,11
END
bounds
206,171,50,11
END
bounds
206,152,50,11
END
bounds
206,136,50,11
END
bounds
206,123,50,11
END
bounds
206,107,50,11
END
bounds
206,93,50,11
END
bounds
206,108,50,11
END
bounds
206,130,50,11
END
bounds
206,131,50,11
END
bounds
206,135,50,11
END
bounds
206,140,50,11
END
colour
237,250,0,255
END
colour
179,250,0,255
END
colour
154,250,0,255
END
colour
105,250,0,255
END
colour
85,250,0,255
END
colour
67,250,0,255
END
colour
59,250,0,255
END
colour
39,250,0,255
END
colour
36,250,0,255
END
colour
65,250,0,255
END
colour
101,250,0,255
END
colour
150,250,0,255
END
colour
173,250,0,255
END
colour
187,250,0,255
END
colour
193,250,0,255
END
colour
191,250,0,255
END
colour
190,250,0,255
END
bounds
206,140,50,9
END
bounds
206,140,50,16
END
bounds
206,140,50,31
END
bounds
206,140,50,43
END
bounds
206,140,50,52
END
bounds
206,140,50,58
END
bounds
206,140,50,67
END
bounds
206,140,50,78
END
bounds
206,140,50,68
END
bounds
206,140,50,56
END
bounds
206,140,50,49
END
bounds
206,140,50,41
END
rotate
0.128000,0,0
END
rotate
0.983000,0,0
END
rotate
1.240000,0,0
END
rotate
1.453000,0,0
END
rotate
1.496000,0,0
END
rotate
1.667000,0,0
END
rotate
1.410000,0,0
END
rotate
0.940000,0,0
END
rotate
0.940000,0,0
END
rotate
0.940000,5,0
END
rotate
0.940000,11,0
END
rotate
0.940000,12,0
END
rotate
0.940000,15,0
END
rotate
0.940000,17,0
END
rotate
0.940000,19,0
END
rotate
0.940000,19,2
END
rotate
0.940000,19,7
END
rotate
0.940000,19,9
END
rotate
0.940000,19,13
END
rotate
0.940000,19,16
END
rotate
0.940000,19,17
END
bounds
205,140,50,41
END
bounds
211,140,50,41
END
bounds
219,140,50,41
END
bounds
223,140,50,41
END
bounds
227,140,50,41
END
bounds
228,140,50,41
END
bounds
229,140,50,41
END
bounds
234,140,50,41
END
bounds
242,140,50,41
END
bounds
258,140,50,41
END
bounds
265,140,50,41
END
bounds
274,140,50,41
END
bounds
283,140,50,41
END
bounds
284,140,50,41
END
bounds
285,140,50,41
END
bounds
286,140,50,41
END
bounds
291,140,50,41
END
bounds
291,142,50,41
END
bounds
291,134,50,41
END
bounds
291,116,50,41
END
bounds
291,107,50,41
END
bounds
291,105,50,41
END
visible
0
END
visible
1
END
outlinethickness
13
END
outlinethickness
20
END
outlinethickness
25
END
outlinethickness
29
END
outlinethickness
34
END
outlinethickness
43
END
outlinethickness
56
END
outlinethickness
58
END
outlinethickness
43
END
outlinethickness
37
END
outlinethickness
33
END
outlinethickness
28
END
outlinethickness
25
END
outlinethickness
24
END
outlinethickness
21
END
outlinethickness
20
END
outlinethickness
18
END
outlinethickness
15
END
outlinethickness
14
END
outlinethickness
12
END
outlinethickness
13
END
outlinethickness
49
END
outlinethickness
50
END
outlinethickness
53
END
outlinethickness
55
END
outlinethickness
58
END
outlinethickness
59
END
outlinethickness
62
END
outlinethickness
63
END
outlinethickness
60
END
outlinethickness
55
END
outlinethickness
49
END
outlinethickness
46
END
outlinethickness
42
END
outlinethickness
39
END
outlinethickness
34
END
outlinethickness
29
END
outlinethickness
25
END
outlinethickness
20
END
outlinethickness
17
END
outlinethickness
11
END
outlinethickness
9
END
outlinethickness
4
END
outlinethickness
1
END
outlinethickness
0
END
outlinethickness
4
END
outlinethickness
5
END
colour
153,250,0,255
END
colour
126,250,0,255
END
colour
111,250,0,255
END
colour
89,250,0,255
END
colour
85,250,0,255
END
colour
76,250,0,255
END
colour
76,247,0,255
END
colour
76,144,0,255
END
colour
76,126,0,255
END
visible
0
END
visible
1
END
Plugin destructor

**********************************************************
Cabbage Log..
Log started: 16 Feb 2017 6:50:01pm

Plugin constructor
caption
size
pluginid
guirefresh
Modifying Widget Appearance
800, 500
TEx1
16
END
pluginid
bounds
colour
shape
outlinecolour
outlinethickness
identchannel
rotate
 20,180, 50,11
250,250,  0,255
sharp
white
2
image1
0, 0, 0
END
bounds
channel
range
fontcolour
colour
  0, 210, 450, 30
HorPos
  0,450, 20,1,1
white
SlateGrey
END
bounds
text
fontcolour
210,233, 35, 11
X Pos.
white
END
X Pos.
bounds
channel
range
fontcolour
colour
460,  0, 30, 200
VertPos
  0,200,20,1,1
white
SlateGrey
END
bounds
text
fontcolour
484,100, 35, 11
Y Pos.
white
END
Y Pos.
bounds
channel
range
fontcolour
colour
text
 10, 240, 390, 30
SizeX
  1,450, 50,1,1
white
SlateGrey
Size X
END
Size X
bounds
channel
range
fontcolour
colour
text
 10, 270, 390, 30
SizeY
  1,450, 11,1,1
white
SlateGrey
Size Y
END
Size Y
bounds
channel
value
text
400,240, 100, 25
VisibleInvisible
2
Invisible", "Visible
END
Invisible"
 "Visible
bounds
text
plant
 10, 310,220,170
Main Object
main
END
Main Object
bounds
channel
items
value
channeltype
 70,  30, 80, 20
Shape
rounded", "sharp", "ellipse
1
string
END
rounded"
 "sharp"
 "ellipse
bounds
channel
range
fontcolour
colour
text
trackercolour
  0,  50,220, 30
Red
  0,255,250,1,1
red
red
Red
red
END
Red
bounds
channel
range
fontcolour
colour
text
trackercolour
  0,  80,220, 30
Green
  0,255,250,1,1
green
green
Green
green
END
Green
bounds
channel
range
fontcolour
colour
text
trackercolour
  0, 110,220, 30
Blue
  0,255,  0,1,1
blue
blue
Blue
blue
END
Blue
bounds
channel
range
fontcolour
colour
text
  0, 140,220, 30
Alpha
  0,255,255,1,1
white
SlateGrey
Alpha
END
Alpha


END
bounds
text
plant
230,310,220,170
Line
line
END
Line
bounds
channel
range
fontcolour
colour
text
  0,  20, 220, 30
Line
0, 100, 0,1,1
white
SlateGrey
Thick
END
Thick
bounds
channel
range
fontcolour
colour
text
trackercolour
  0,  50, 220, 30
LineRed
  0,255,250,1,1
red
red
Red
red
END
Red
bounds
channel
range
fontcolour
colour
text
trackercolour
  0,  80, 220, 30
LineGreen
  0,255,250,1,1
green
green
Green
green
END
Green
bounds
channel
range
fontcolour
colour
text
trackercolour
  0, 110, 220, 30
LineBlue
  0,255,  0,1,1
blue
blue
Blue
blue
END
Blue
bounds
channel
range
fontcolour
colour
text
  0, 140, 220, 30
LineAlpha
  0,255,255,1,1
white
SlateGrey
Alpha
END
Alpha


END
bounds
text
plant
450,370,220,110
Rotation
rotatation
END
Rotation
bounds
channel
range
fontcolour
colour
text
  0,  20, 220, 30
radians
0, 6.283, 0,1,0.001
white
SlateGrey
Radians
END
Radians
bounds
channel
range
fontcolour
colour
text
  0,  50, 220, 30
pivotx
0, 1, 0,1,0.001
white
SlateGrey
Pivot X
END
Pivot X
bounds
channel
range
fontcolour
colour
text
  0,  80, 220, 30
pivoty
0, 1, 0,1,0.001
white
SlateGrey
Pivot Y
END
Pivot Y


END
bounds
colour
shape
outlinecolour
line
plant
525,10,265,310
 10, 10, 15
sharp
white
0
instructions
END
line
bounds
fontcolour
align
text
  5, 5, 255, 12
white
left
It is possible to modify various aspects of a 
END
It is possible to modify various aspects of a 
bounds
fontcolour
align
text
  5,20, 255, 12
white
left
widget's appearance during Csound  
END
widget's appearance during Csound  
bounds
fontcolour
align
text
  5,35, 255, 12
white
left
performance. This is achieved through the 
END
performance. This is achieved through the 
bounds
fontcolour
align
text
  5,50, 255, 12
white
left
use of widget's 'identchannel' - a name given
END
use of widget's 'identchannel' - a name given
bounds
fontcolour
align
text
  5,65, 255, 12
white
left
to the widget to identify it from within the 
END
to the widget to identify it from within the 
bounds
fontcolour
align
text
  5,80, 255, 12
white
left
Csound orchestra. The widget is sent an 
END
Csound orchestra. The widget is sent an 
bounds
fontcolour
align
text
  5,95, 255, 12
white
left
instruction as a string variable  
END
instruction as a string variable  
bounds
fontcolour
align
text
  5,110, 255, 12
white
left
corresponding to the change in appearance
END
corresponding to the change in appearance
bounds
fontcolour
align
text
  5,125, 255, 12
white
left
we desire. This message is sent using the
END
we desire. This message is sent using the
bounds
fontcolour
align
text
  5,140, 255, 12
white
left
'chnset' opcode and the channel used is the 
END
'chnset' opcode and the channel used is the 
bounds
fontcolour
align
text
  5,155, 255, 12
white
left
'identchannel' name we defined previously 
END
'identchannel' name we defined previously 
bounds
fontcolour
align
text
  5,170, 255, 12
white
left
for the widget.
END
for the widget.
bounds
fontcolour
align
text
  5,190, 255, 12
white
left
In this example various attributes of an
END
In this example various attributes of an
bounds
fontcolour
align
text
  5,205, 255, 12
white
left
'image' widget can be modified using the  
END
'image' widget can be modified using the  
bounds
fontcolour
align
text
  5,220, 255, 12
white
left
on-screen sliders comboboxes and buttons.
END
on-screen sliders comboboxes and buttons.
bounds
fontcolour
align
text
  5,235, 255, 12
white
left
For the sake of efficiency widgets are only
END
For the sake of efficiency widgets are only
bounds
fontcolour
align
text
  5,250, 255, 12
white
left
sent messages when the sliders are moved.
END
sent messages when the sliders are moved.
bounds
fontcolour
align
text
  5,265, 255, 12
white
left
We can detect changes in the sliders using
END
We can detect changes in the sliders using
bounds
fontcolour
align
text
  5,280, 255, 12
white
left
triggers generated by the 'changed' opcode.
END
triggers generated by the 'changed' opcode.


END
2
UnifiedCSD:  /home/rory/sourcecode/cabaiste/Examples/Instructional/ModifyingWidgetAppearance.csd
STARTING FILE
Creating options
Creating orchestra
Creating score
rtaudio: ALSA module enabled
rtmidi: ALSA Raw MIDI module enabled
Elapsed time at end of orchestra compile: real: 0.003s, CPU: 0.003s
sorting score ...
	... done
Elapsed time at end of score sort: real: 0.003s, CPU: 0.003s
displays suppressed
0dBFS level = 1.0
orch now loaded
audio buffered in 256 sample-frame blocks
SECTION 1:
new alloc for instr 1:
end of section 1	 sect peak amps:  0.00000  0.00000
SECTION 1:


colour
250,250,0,255
END
bounds
20,176,50,11
END
bounds
20,160,50,11
END
bounds
20,137,50,11
END
bounds
20,122,50,11
END
bounds
20,96,50,11
END
bounds
20,84,50,11
END
bounds
20,73,50,11
END
bounds
20,68,50,11
END
bounds
20,75,50,11
END
bounds
20,127,50,11
END
bounds
20,137,50,11
END
bounds
20,143,50,11
END
bounds
20,145,50,11
END
rotate
0.427000,0,0
END
rotate
1.325000,0,0
END
rotate
2.906000,0,0
END
rotate
3.077000,0,0
END
rotate
2.265000,0,0
END
rotate
0.000000,0,0
END
rotate
0.000000,26,0
END
rotate
0.000000,44,0
END
rotate
0.000000,43,0
END
rotate
0.000000,43,1
END
rotate
0.000000,43,4
END
rotate
0.000000,43,10
END

**********************************************************
Cabbage Log..
Log started: 16 Feb 2017 6:52:14pm

Plugin constructor
X Pos.
Y Pos.
Size X
Size Y
Invisible"
 "Visible
Main Object
rounded"
 "sharp"
 "ellipse
Red
Green
Blue
Alpha
Line
Thick
Red
Green
Blue
Alpha
Rotation
Radians
Pivot X
Pivot Y
It is possible to modify various aspects of a 
widget's appearance during Csound  
performance. This is achieved through the 
use of widget's 'identchannel' - a name given
to the widget to identify it from within the 
Csound orchestra. The widget is sent an 
instruction as a string variable  
corresponding to the change in appearance
we desire. This message is sent using the
'chnset' opcode and the channel used is the 
'identchannel' name we defined previously 
for the widget.
In this example various attributes of an
'image' widget can be modified using the  
on-screen sliders comboboxes and buttons.
For the sake of efficiency widgets are only
sent messages when the sliders are moved.
We can detect changes in the sliders using
triggers generated by the 'changed' opcode.
2
UnifiedCSD:  /home/rory/sourcecode/cabaiste/Examples/Instructional/ModifyingWidgetAppearance.csd
STARTING FILE
Creating options
Creating orchestra
Creating score
rtaudio: ALSA module enabled
rtmidi: ALSA Raw MIDI module enabled
Elapsed time at end of orchestra compile: real: 0.004s, CPU: 0.004s
sorting score ...
	... done
Elapsed time at end of score sort: real: 0.004s, CPU: 0.004s
displays suppressed
0dBFS level = 1.0
orch now loaded
audio buffered in 256 sample-frame blocks
SECTION 1:
new alloc for instr 1:
end of section 1	 sect peak amps:  0.00000  0.00000
SECTION 1:



**********************************************************
Cabbage Log..
Log started: 16 Feb 2017 6:52:45pm

Plugin constructor
X Pos.
Y Pos.
Size X
Size Y
Invisible"
 "Visible
Main Object
rounded"
 "sharp"
 "ellipse
Red
Green
Blue
Alpha
Line
Thick
Red
Green
Blue
Alpha
Rotation
Radians
Pivot X
Pivot Y
It is possible to modify various aspects of a 
widget's appearance during Csound  
performance. This is achieved through the 
use of widget's 'identchannel' - a name given
to the widget to identify it from within the 
Csound orchestra. The widget is sent an 
instruction as a string variable  
corresponding to the change in appearance
we desire. This message is sent using the
'chnset' opcode and the channel used is the 
'identchannel' name we defined previously 
for the widget.
In this example various attributes of an
'image' widget can be modified using the  
on-screen sliders comboboxes and buttons.
For the sake of efficiency widgets are only
sent messages when the sliders are moved.
We can detect changes in the sliders using
triggers generated by the 'changed' opcode.
2
UnifiedCSD:  /home/rory/sourcecode/cabaiste/Examples/Instructional/ModifyingWidgetAppearance.csd
STARTING FILE
Creating options
Creating orchestra
Creating score
rtaudio: ALSA module enabled
rtmidi: ALSA Raw MIDI module enabled
Elapsed time at end of orchestra compile: real: 0.004s, CPU: 0.003s
sorting score ...
	... done
Elapsed time at end of score sort: real: 0.004s, CPU: 0.003s
displays suppressed
0dBFS level = 1.0
orch now loaded
audio buffered in 256 sample-frame blocks
SECTION 1:
new alloc for instr 1:
end of section 1	 sect peak amps:  0.00000  0.00000
SECTION 1:



**********************************************************
Cabbage Log..
Log started: 16 Feb 2017 6:53:18pm

Plugin constructor
X Pos.
Y Pos.
Size X
Size Y
Invisible"
 "Visible
Main Object
rounded"
 "sharp"
 "ellipse
Red
Green
Blue
Alpha
Line
Thick
Red
Green
Blue
Alpha
Rotation
Radians
Pivot X
Pivot Y
It is possible to modify various aspects of a 
widget's appearance during Csound  
performance. This is achieved through the 
use of widget's 'identchannel' - a name given
to the widget to identify it from within the 
Csound orchestra. The widget is sent an 
instruction as a string variable  
corresponding to the change in appearance
we desire. This message is sent using the
'chnset' opcode and the channel used is the 
'identchannel' name we defined previously 
for the widget.
In this example various attributes of an
'image' widget can be modified using the  
on-screen sliders comboboxes and buttons.
For the sake of efficiency widgets are only
sent messages when the sliders are moved.
We can detect changes in the sliders using
triggers generated by the 'changed' opcode.
2
UnifiedCSD:  /home/rory/sourcecode/cabaiste/Examples/Instructional/ModifyingWidgetAppearance.csd
STARTING FILE
Creating options
Creating orchestra
Creating score
rtaudio: ALSA module enabled
rtmidi: ALSA Raw MIDI module enabled
Elapsed time at end of orchestra compile: real: 0.003s, CPU: 0.003s
sorting score ...
	... done
Elapsed time at end of score sort: real: 0.003s, CPU: 0.003s
displays suppressed
0dBFS level = 1.0
orch now loaded
audio buffered in 256 sample-frame blocks
SECTION 1:
new alloc for instr 1:
end of section 1	 sect peak amps:  0.00000  0.00000
SECTION 1:



**********************************************************
Cabbage Log..
Log started: 16 Feb 2017 6:55:50pm

Plugin constructor
X Pos.
Y Pos.
Size X
Size Y
Invisible"
 "Visible
Main Object
rounded"
 "sharp"
 "ellipse
Red
Green
Blue
Alpha
Line
Thick
Red
Green
Blue
Alpha
Rotation
Radians
Pivot X
Pivot Y
It is possible to modify various aspects of a 
widget's appearance during Csound  
performance. This is achieved through the 
use of widget's 'identchannel' - a name given
to the widget to identify it from within the 
Csound orchestra. The widget is sent an 
instruction as a string variable  
corresponding to the change in appearance
we desire. This message is sent using the
'chnset' opcode and the channel used is the 
'identchannel' name we defined previously 
for the widget.
In this example various attributes of an
'image' widget can be modified using the  
on-screen sliders comboboxes and buttons.
For the sake of efficiency widgets are only
sent messages when the sliders are moved.
We can detect changes in the sliders using
triggers generated by the 'changed' opcode.
2
UnifiedCSD:  /home/rory/sourcecode/cabaiste/Examples/Instructional/ModifyingWidgetAppearance.csd
STARTING FILE
Creating options
Creating orchestra
Creating score
rtaudio: ALSA module enabled
rtmidi: ALSA Raw MIDI module enabled
Elapsed time at end of orchestra compile: real: 0.003s, CPU: 0.003s
sorting score ...
	... done
Elapsed time at end of score sort: real: 0.003s, CPU: 0.003s
displays suppressed
0dBFS level = 1.0
orch now loaded
audio buffered in 256 sample-frame blocks
SECTION 1:
new alloc for instr 1:
end of section 1	 sect peak amps:  0.00000  0.00000
SECTION 1:



**********************************************************
Cabbage Log..
Log started: 16 Feb 2017 6:57:33pm

Plugin constructor
X Pos.
Y Pos.
Size X
Size Y
Invisible"
 "Visible
Main Object
rounded"
 "sharp"
 "ellipse
Red
Green
Blue
Alpha
Line
Thick
Red
Green
Blue
Alpha
Rotation
Radians
Pivot X
Pivot Y
It is possible to modify various aspects of a 
widget's appearance during Csound  
performance. This is achieved through the 
use of widget's 'identchannel' - a name given
to the widget to identify it from within the 
Csound orchestra. The widget is sent an 
instruction as a string variable  
corresponding to the change in appearance
we desire. This message is sent using the
'chnset' opcode and the channel used is the 
'identchannel' name we defined previously 
for the widget.
In this example various attributes of an
'image' widget can be modified using the  
on-screen sliders comboboxes and buttons.
For the sake of efficiency widgets are only
sent messages when the sliders are moved.
We can detect changes in the sliders using
triggers generated by the 'changed' opcode.
2
UnifiedCSD:  /home/rory/sourcecode/cabaiste/Examples/Instructional/ModifyingWidgetAppearance.csd
STARTING FILE
Creating options
Creating orchestra
Creating score
rtaudio: ALSA module enabled
rtmidi: ALSA Raw MIDI module enabled
Elapsed time at end of orchestra compile: real: 0.003s, CPU: 0.003s
sorting score ...
	... done
Elapsed time at end of score sort: real: 0.003s, CPU: 0.003s
displays suppressed
0dBFS level = 1.0
orch now loaded
audio buffered in 256 sample-frame blocks
SECTION 1:
new alloc for instr 1:
end of section 1	 sect peak amps:  0.00000  0.00000
SECTION 1:



**********************************************************
Cabbage Log..
Log started: 16 Feb 2017 6:58:06pm

Plugin constructor
X Pos.
Y Pos.
Size X
Size Y
Invisible"
 "Visible
Main Object
rounded"
 "sharp"
 "ellipse
Red
Green
Blue
Alpha
Line
Thick
Red
Green
Blue
Alpha
Rotation
Radians
Pivot X
Pivot Y
It is possible to modify various aspects of a 
widget's appearance during Csound  
performance. This is achieved through the 
use of widget's 'identchannel' - a name given
to the widget to identify it from within the 
Csound orchestra. The widget is sent an 
instruction as a string variable  
corresponding to the change in appearance
we desire. This message is sent using the
'chnset' opcode and the channel used is the 
'identchannel' name we defined previously 
for the widget.
In this example various attributes of an
'image' widget can be modified using the  
on-screen sliders comboboxes and buttons.
For the sake of efficiency widgets are only
sent messages when the sliders are moved.
We can detect changes in the sliders using
triggers generated by the 'changed' opcode.
2
UnifiedCSD:  /home/rory/sourcecode/cabaiste/Examples/Instructional/ModifyingWidgetAppearance.csd
STARTING FILE
Creating options
Creating orchestra
Creating score
rtaudio: ALSA module enabled
rtmidi: ALSA Raw MIDI module enabled
Elapsed time at end of orchestra compile: real: 0.003s, CPU: 0.003s
sorting score ...
	... done
Elapsed time at end of score sort: real: 0.003s, CPU: 0.003s
displays suppressed
0dBFS level = 1.0
orch now loaded
audio buffered in 256 sample-frame blocks
SECTION 1:
new alloc for instr 1:
end of section 1	 sect peak amps:  0.00000  0.00000
SECTION 1:


